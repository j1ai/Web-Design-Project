'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _nodeSchedule = require('node-schedule');

var _nodeSchedule2 = _interopRequireDefault(_nodeSchedule);

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _package = require('../../package.json');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Holds the last commit that was synchronized
var lastCommit = '';

var db = {};

db.update = function (collection) {
  var url = 'https://raw.githubusercontent.com/cobalt-uoft/datasets/master/' + collection + '.json';
  _https2.default.get(url, function (res) {
    var filePath = '.cobalt_data/' + collection + '.json';
    var stream = _fs2.default.createWriteStream(filePath, { 'flags': 'w' });

    res.on('data', function (chunk) {
      stream.write(chunk);
    });

    res.on('end', function () {
      stream.end();

      _mongoose2.default.connection.db.collection(collection).remove(function (e, count) {
        if (e) {
          return _winston2.default.warn('Could not import ' + collection + ' to MongoDB.', e);
        }

        var shell = _child_process2.default.spawn('mongoimport', ['-d', _mongoose2.default.connection.name, '-c', collection, '--host', _mongoose2.default.connection.host, '--port', _mongoose2.default.connection.port, '--file', filePath]);

        shell.on('close', function (code) {
          if (code == 0) {
            _winston2.default.info('Synced ' + collection + '.');
          } else {
            _winston2.default.warn('Could not import ' + collection + ' to MongoDB.               The \'mongoexport\' command left us with exit code ' + code + '.');
          }
        });
      });
    });
  }).on('error', function (e) {
    _winston2.default.warn('Could not update database, online datasets are \
      currently inaccessible.', e);
  });
};

db.sync = function () {
  db.update('athletics');
  db.update('buildings');
  db.update('courses');
  db.update('exams');
  db.update('food');
  db.update('parking');
  db.update('shuttles');
  db.update('textbooks');
};

db.check = function (callback) {
  var options = {
    host: 'api.github.com',
    port: 443,
    path: '/repos/cobalt-uoft/datasets/git/refs/heads/master',
    headers: { 'user-agent': 'cobalt-uoft/' + _package.version }
  };

  _https2.default.get(options, function (res) {
    var data = '';

    res.on('data', function (chunk) {
      data += chunk;
    });

    res.on('end', function () {
      data = JSON.parse(data);

      // Compare the last commit hash to the current one
      if (data.object.sha == lastCommit) return;

      lastCommit = data.object.sha;

      // Execute the callback
      if (callback) callback();
    });
  });
};

db.syncCron = function () {
  // Make data directory if it doesn't exist
  try {
    _fs2.default.statSync('.cobalt_data');
  } catch (e) {
    _fs2.default.mkdirSync('.cobalt_data');
  }

  // Perform sync on startup
  db.sync();

  // Schedule checking for sync every hour
  _nodeSchedule2.default.scheduleJob('0 * * * *', function () {
    db.check(function () {
      db.sync();
    });
  });
};

exports.default = db;