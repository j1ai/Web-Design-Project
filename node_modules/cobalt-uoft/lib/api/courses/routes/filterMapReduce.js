'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var o = {};

o.map = function () {
  var matched = [];

  for (var h = 0; h < this.meeting_sections.length; h++) {
    var x = this.meeting_sections[h];

    var result = [];

    // For each AND-type token
    for (var i = 0; i < q.length; i++) {
      result[i] = [];

      // For each OR-type token
      for (var j = 0; j < q[i].length; j++) {
        result[i][j] = false;
        var p = q[i][j];
        var value = undefined;

        if (['meeting_code', 'size', 'enrolment', 'instructor'].indexOf(p.key) > -1) {
          value = x[keyMap[p.key].relativeValue];
        } else if (['day', 'start', 'end', 'duration', 'location'].indexOf(p.key) > -1) {
          value = [];
          for (var l = 0; l < x.times.length; l++) {
            value.push(x.times[l][keyMap[p.key].relativeValue]);
          }
        } else {
          result[i][j] = true;
          continue;
        }

        if (value.constructor === Array) {
          var bools = [];

          if (p.filter.operator === '!') {
            for (var _l = 0; _l < value.length; _l++) {
              if (isNaN(parseFloat(value[_l])) || !isFinite(value[_l])) {
                // Is not a number
                bools.push(!value[_l].toLowerCase().match(p.filter.value.toLowerCase()));
              } else {
                bools.push(value[_l] !== p.filter.value);
              }
            }
          } else if (p.filter.operator === '>') {
            for (var _l2 = 0; _l2 < value.length; _l2++) {
              bools.push(value[_l2] > p.filter.value);
            }
          } else if (p.filter.operator === '<') {
            for (var _l3 = 0; _l3 < value.length; _l3++) {
              bools.push(value[_l3] < p.filter.value);
            }
          } else if (p.filter.operator === '>=') {
            for (var _l4 = 0; _l4 < value.length; _l4++) {
              bools.push(value[_l4] >= p.filter.value);
            }
          } else if (p.filter.operator === '<=') {
            for (var _l5 = 0; _l5 < value.length; _l5++) {
              bools.push(value[_l5] <= p.filter.value);
            }
          } else {
            for (var _l6 = 0; _l6 < value.length; _l6++) {
              if (isNaN(parseFloat(value[_l6])) || !isFinite(value[_l6])) {
                // Is not a number
                bools.push(value[_l6].toLowerCase().match(p.filter.value.toLowerCase()));
              } else {
                bools.push(value[_l6] === p.filter.value);
              }
            }
          }

          result[i][j] = bools.some(Boolean);
        } else {
          if (p.filter.operator === '!') {
            if (isNaN(parseFloat(value)) || !isFinite(value)) {
              // Is not a number
              result[i][j] = !value.toLowerCase().match(p.filter.value.toLowerCase());
            } else {
              result[i][j] = value !== p.filter.value;
            }
          } else if (p.filter.operator === '>') {
            result[i][j] = value > p.filter.value;
          } else if (p.filter.operator === '<') {
            result[i][j] = value < p.filter.value;
          } else if (p.filter.operator === '>=') {
            result[i][j] = value >= p.filter.value;
          } else if (p.filter.operator === '<=') {
            result[i][j] = value <= p.filter.value;
          } else {
            if (isNaN(parseFloat(value)) || !isFinite(value)) {
              // Is not a number
              result[i][j] = value.toLowerCase().match(p.filter.value.toLowerCase());
            } else {
              result[i][j] = value === p.filter.value;
            }
          }
        }
      }
    }

    for (var _i = 0; _i < result.length; _i++) {
      result[_i] = result[_i].some(Boolean);
    }

    result = result.every(Boolean);

    if (result) {
      matched.push(x);
    }
  }

  if (matched.length > 0) {
    this.matched_meeting_sections = matched;
    delete this._id;
    delete this.__v;
    emit(this.id, this);
  }
};

o.reduce = function (key, values) {
  return values[0];
};

exports.default = o;