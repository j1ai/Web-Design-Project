'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Default values
var LIMIT = 10;
var SKIP = 0;
var SORT = 'id date';

var Validator = function () {
  function Validator() {
    (0, _classCallCheck3.default)(this, Validator);
  }

  (0, _createClass3.default)(Validator, null, [{
    key: 'limit',
    value: function limit(req, res, next) {
      if (req.query.limit) {
        if (isNaN(req.query.limit) || req.query.limit < 1 || req.query.limit > 100) {
          var err = new Error('Limit must be a positive integer greater than 1 and less than or equal to 100.');
          err.status = 422;
          return next(err);
        }
        req.query.limit = parseInt(req.query.limit);
      } else {
        req.query.limit = LIMIT;
      }
      next();
    }
  }, {
    key: 'skip',
    value: function skip(req, res, next) {
      if (req.query.skip) {
        if (isNaN(req.query.skip) || req.query.skip < 0) {
          var err = new Error('Skip must be a positive integer.');
          err.status = 422;
          return next(err);
        }
        req.query.skip = parseInt(req.query.skip);
      } else {
        req.query.skip = SKIP;
      }
      next();
    }
  }, {
    key: 'sort',
    value: function sort(req, res, next) {
      if (req.query.sort) {
        if (req.query.sort.length < 2) {
          var err = new Error('Sort must be a string of length greater than 1.');
          err.status = 422;
          return next(err);
        }
      } else {
        req.query.sort = SORT;
      }
      next();
    }
  }, {
    key: 'query',
    value: function query(req, res, next) {
      if (!req.query.q) {
        var err = new Error('Query must be specified.');
        err.status = 422;
        return next(err);
      } else if (req.query.q.length < 3) {
        var _err = new Error('Query must be of length greater than 2.');
        _err.status = 422;
        return next(_err);
      }
      next();
    }
  }, {
    key: 'id',
    value: function id(req, res, next) {
      next();
    }
  }, {
    key: 'date',
    value: function date(req, res, next) {
      if (!/^\d{4}-\d{2}-\d{2}$/.test(req.params.date)) {
        var err = new Error('Date must be of format YYYY-MM-DD.');
        err.status = 422;
        return next(err);
      }
      next();
    }
  }]);
  return Validator;
}();

exports.default = Validator;