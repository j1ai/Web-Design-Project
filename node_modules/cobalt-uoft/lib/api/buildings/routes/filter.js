'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.default = filter;

var _model = require('../model');

var _model2 = _interopRequireDefault(_model);

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

var _queryParser = require('../../utils/query-parser');

var _queryParser2 = _interopRequireDefault(_queryParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Mapping of valid filter keys
var KEYMAP = {
  'code': { type: 'string', value: 'code' },
  'name': { type: 'string', value: 'name' },
  'short_name': { type: 'string', value: 'short_name' },
  'campus': { type: 'string', value: 'campus' },
  'street': { type: 'string', value: 'address.street' },
  'city': { type: 'string', value: 'address.city' },
  'country': { type: 'string', value: 'address.country' },
  'postal': { type: 'string', value: 'address.postal' },
  'lat': { type: 'number', value: 'lat' },
  'lng': { type: 'number', value: 'lng' }
};

function filter(req, res, next) {
  // Generate parsed tokens and filters from query
  var query = _queryParser2.default.parseQuery(req.query.q, KEYMAP);

  (0, _co2.default)(_regenerator2.default.mark(function _callee() {
    var docs;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _model2.default.find(query.filter, '-__v -_id -address._id').limit(req.query.limit).skip(req.query.skip).sort(req.query.sort).exec();

          case 3:
            docs = _context.sent;

            res.json(docs);
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context['catch'](0);
            return _context.abrupt('return', next(_context.t0));

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 7]]);
  }));
}