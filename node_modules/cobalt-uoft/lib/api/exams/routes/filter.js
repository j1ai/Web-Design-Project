'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.default = filter;

var _model = require('../model');

var _model2 = _interopRequireDefault(_model);

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

var _queryParser = require('../../utils/query-parser');

var _queryParser2 = _interopRequireDefault(_queryParser);

var _filterMapReduce = require('./filterMapReduce');

var _filterMapReduce2 = _interopRequireDefault(_filterMapReduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO add filters for sections.exam_section

var KEYMAP = {
  'id': { type: 'string', value: 'id' },
  'code': { type: 'string', value: 'course_code' },
  'campus': { type: 'string', value: 'campus' },
  'period': { type: 'string', value: 'period' },
  'date': { type: 'date', value: 'date' },
  'start': { type: 'time', value: 'start_time' },
  'end': { type: 'time', value: 'end_time' },
  'duration': { type: 'time', value: 'duration' },
  'lecture': { type: 'string', value: 'sections.lecture_code', relativeValue: 'lecture_code' },
  'location': { type: 'string', value: 'sections.location', relativeValue: 'location' }
};

function filter(req, res, next) {
  // Generate parsed tokens and filters from query
  var query = _queryParser2.default.parseQuery(req.query.q, KEYMAP);

  if (query.mapReduce) {
    (0, _co2.default)(_regenerator2.default.mark(function _callee() {
      var docs, i;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return _model2.default.mapReduce({
                query: query.filter,
                scope: {
                  q: query.tokens,
                  keyMap: KEYMAP
                },
                limit: req.query.limit,
                map: _filterMapReduce2.default.map,
                reduce: _filterMapReduce2.default.reduce
              });

            case 3:
              docs = _context.sent;

              for (i = 0; i < docs.length; i++) {
                docs[i] = docs[i].value;
              }
              res.json(docs);
              _context.next = 11;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context['catch'](0);
              return _context.abrupt('return', next(_context.t0));

            case 11:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));
  } else {
    (0, _co2.default)(_regenerator2.default.mark(function _callee2() {
      var docs;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return _model2.default.find(query.filter, '-__v -_id -sections._id').limit(req.query.limit).skip(req.query.skip).sort(req.query.sort).exec();

            case 3:
              docs = _context2.sent;

              res.json(docs);
              _context2.next = 10;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2['catch'](0);
              return _context2.abrupt('return', next(_context2.t0));

            case 10:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 7]]);
    }));
  }
}