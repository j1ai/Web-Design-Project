'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var o = {};

o.map = function () {
  var matched = [];

  for (var h = 0; h < this.sections.length; h++) {
    delete this.sections[h]._id;

    var x = this.sections[h];

    var result = [];

    for (var i = 0; i < q.length; i++) {
      result[i] = [];

      for (var j = 0; j < q[i].length; j++) {
        result[i][j] = false;
        var p = q[i][j];

        var value = x[keyMap[p.key].relativeValue];
        if (!value) {
          // Continue if value is not applicable
          result[i][j] = true;
          continue;
        }

        if (p.filter.operator === '!') {
          if (isNaN(parseFloat(value)) || !isFinite(value)) {
            // Is not a number
            result[i][j] = !value.toLowerCase().match(p.filter.value.toLowerCase());
          } else {
            result[i][j] = value !== p.filter.value;
          }
        } else if (p.filter.operator === '>') {
          result[i][j] = value > p.filter.value;
        } else if (p.filter.operator === '<') {
          result[i][j] = value < p.filter.value;
        } else if (p.filter.operator === '>=') {
          result[i][j] = value >= p.filter.value;
        } else if (p.filter.operator === '<=') {
          result[i][j] = value <= p.filter.value;
        } else {
          if (isNaN(parseFloat(value)) || !isFinite(value)) {
            // Is not a number
            result[i][j] = value.toLowerCase().match(p.filter.value.toLowerCase());
          } else {
            result[i][j] = value === p.filter.value;
          }
        }
      }
    }

    for (var _i = 0; _i < result.length; _i++) {
      result[_i] = result[_i].some(Boolean);
    }

    result = result.every(Boolean);

    if (result) {
      matched.push(x);
    }
  }

  if (matched.length > 0) {
    this.matched_sections = matched;
    delete this._id;
    delete this.__v;
    emit(this.id, this);
  }
};

o.reduce = function (key, values) {
  values[0];
};

exports.default = o;